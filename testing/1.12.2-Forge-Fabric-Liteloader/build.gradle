plugins {
    id 'java'
    id 'xyz.wagyourtail.unimined' // version '1.0.0'
}

group 'com.example'
version '1.0-SNAPSHOT'

base {
    archivesName = 'UniminedExampleMod'
}

// this is just here so we can test the outputs easier and clean between tests
unimined.useGlobalCache = false

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

sourceSets {
    fabric {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    forge {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    liteloader {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

repositories {
    maven {
        name = "wagyourtail releases"
        url = "https://maven.wagyourtail.xyz/releases"
    }
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven"
    }
    mavenCentral()
}

unimined.minecraft {
    version project.minecraft_version

    mappings {
        searge()
        mcp("stable", "39-1.12")
    }

    defaultRemapJar = false
}

unimined.minecraft(sourceSets.fabric) {
    combineWith(sourceSets.main)

    legacyFabric {
        loader project.fabric_version
    }

    defaultRemapJar = true
}

unimined.minecraft(sourceSets.forge) {
    combineWith(sourceSets.main)

    minecraftForge {
        loader project.forge_version
        mixinConfig "modid.mixins.json"
    }

    defaultRemapJar = true
}

unimined.minecraft(sourceSets.liteloader) {
    combineWith(sourceSets.main)
    side("client")

    liteloader()

    defaultRemapJar = true
}



configurations {
    mainImplementation
    implementation {
        extendsFrom forgeImplementation
        extendsFrom fabricImplementation
    }
}

sourceSets {
    main {
        compileClasspath += configurations.mainImplementation
        runtimeClasspath += configurations.mainImplementation
    }
}

dependencies {
}

jar {
    enabled = false
}

processFabricResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

processForgeResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }

    filesMatching("mcmod.info") {
        expand "version": project.version
    }
}

processLiteloaderResources {
    inputs.property "version", project.version

    filesMatching("litemod.json") {
        expand "version": project.version
    }
}